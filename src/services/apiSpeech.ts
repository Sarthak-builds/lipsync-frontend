import axios from "axios";
import type { SpeechGeneratedResponse, SpeechRequest } from "../types/speech";
import { useAuthStore } from "../stores/authStore";

const api = axios.create({
baseURL: "http://localhost:8000/api"
});

api.interceptors.request.use((config)=> {
    const AUthState = useAuthStore.getState();
    if(AUthState.isAuthenticated && AUthState.token) {
        const token = AUthState.token;
        config.headers.Authorization= `token ${token}`;
    }
    return config;
})
//POST reqquest for speech generation
export const generateSpeech = async (speechPayload:SpeechRequest): Promise<SpeechGeneratedResponse> => {
const response = await api.post("/speech-generations/", speechPayload);
console.log(response.data);
   return response.data;
}
//GET request to get all the speech generated
export const getAllSpeechesGenerated = async (): Promise<SpeechGeneratedResponse[]> => {
const response = await api.get("/speech-generations/");
console.log(response.data);
return response.data;
}
//GET BY ID request to get speech generated by id
export const getSpeechGeneratedById = async (id:number): Promise<SpeechGeneratedResponse> => {
    const response = await api.post(`/speech-generations/${id}`);
    console.log(response.data);
    return response.data;
}